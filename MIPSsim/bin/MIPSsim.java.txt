//Prakash Pudhucode
//CDA3101 Project 2
//Section 6691
//“On my honor, I have neither given nor received
//unauthorized aid on this assignment”
//Due Date: Nov 22, 2016
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Scanner;

import javax.imageio.spi.RegisterableService;

public class MIPSsim {
	static String twoscomp(String s) {
		String left = "";
		String right = "";
		String fin = "";
		if (s.substring(0, 1).equals("1")) {
			fin += "n";
			int counter = 0;
			for (int i = s.length() - 1; i >= 0; i--) {
				if (s.substring(i, i + 1).equals("1")) {
					counter++;
				}
				if (counter == 1) {
					left = s.substring(0, i);
					right = s.substring(i, s.length());
					break;
				}
			}
			for (int i = 0; i < left.length(); i++) {
				if (left.substring(i, i + 1).equals("1")) {
					fin += "0";
				} else {
					fin += "1";
				}
			}
			fin += right;
			return fin;
		} else {
			fin = "p" + s;
			return fin;
		}
	}

	static int bin2dec(String s) {
		int sum = 0;
		for (int i = s.length() - 1; i >= 1; i--) {
			sum += Integer.parseInt(s.substring(i, i + 1)) * Math.pow(2, s.length() - (i + 1));
		}
		if (s.substring(0, 1).equals("p"))
			return sum;
		else
			return -1 * sum;
	}

	static int unsigned(String s) {
		int sum = 0;
		for (int i = s.length() - 1; i >= 0; i--) {
			sum += Integer.parseInt(s.substring(i, i + 1)) * Math.pow(2, s.length() - (i + 1));
		}
		return sum;
	}

	static String cat1(String s) {
		String instruction = "";
		if (s.substring(0, 3).equals("000")) {
			instruction += "NOP";
		} else if (s.substring(0, 3).equals("001")) {
			instruction += "J ";
		} else if (s.substring(0, 3).equals("010")) {
			instruction += "BEQ ";
		} else if (s.substring(0, 3).equals("011")) {
			instruction += "BNE ";
		} else if (s.substring(0, 3).equals("100")) {
			instruction += "BGTZ ";
		} else if (s.substring(0, 3).equals("101")) {
			instruction += "SW ";
		} else if (s.substring(0, 3).equals("110")) {
			instruction += "LW ";
		} else if (s.substring(0, 3).equals("111")) {
			instruction += "BREAK";
		}
		if (instruction.equals("BREAK") || instruction.equals("NOP"))
			return instruction;
		else if (instruction.equals("J ")) {
			instruction += "#" + 4 * unsigned(s.substring(13, s.length()));
		} else if (instruction.equals("BEQ ") || instruction.equals("BNE ")) {
			instruction += "R" + bin2dec(twoscomp(s.substring(3, 8))) + ", ";
			instruction += "R" + bin2dec(twoscomp(s.substring(8, 13))) + ", ";
			instruction += "#" + bin2dec(twoscomp(s.substring(13, s.length())));
		} else if (instruction.equals("BGTZ ")) {
			instruction += "R" + bin2dec(twoscomp(s.substring(3, 8))) + ", ";
			instruction += "#" + bin2dec(twoscomp(s.substring(13, s.length())));
		} else if (instruction.equals("SW ") || instruction.equals("LW ")) {
			instruction += "R" + bin2dec(twoscomp(s.substring(8, 13))) + ", ";
			instruction += bin2dec(twoscomp(s.substring(13, s.length()))) + "(";
			instruction += "R" + bin2dec(twoscomp(s.substring(3, 8))) + ")";
		}
		return instruction;
	}

	static String cat2(String s) {
		String instruction = "";
		if (s.substring(0, 3).equals("000")) {
			instruction += "XOR ";
		} else if (s.substring(0, 3).equals("001")) {
			instruction += "MUL ";
		} else if (s.substring(0, 3).equals("010")) {
			instruction += "ADD ";
		} else if (s.substring(0, 3).equals("011")) {
			instruction += "SUB ";
		} else if (s.substring(0, 3).equals("100")) {
			instruction += "AND ";
		} else if (s.substring(0, 3).equals("101")) {
			instruction += "OR ";
		} else if (s.substring(0, 3).equals("110")) {
			instruction += "ADDU ";
		} else if (s.substring(0, 3).equals("111")) {
			instruction += "SUBU ";
		}
		instruction += "R" + bin2dec(twoscomp(s.substring(3, 8))) + ", " + "R" + bin2dec(twoscomp(s.substring(8, 13)))
				+ ", " + "R" + bin2dec(twoscomp(s.substring(13, 18)));
		return instruction;
	}

	static String cat3(String s) {
		String instruction = "";
		if (s.substring(0, 3).equals("000")) {
			instruction += "ORI ";
		} else if (s.substring(0, 3).equals("001")) {
			instruction += "XORI ";
		} else if (s.substring(0, 3).equals("010")) {
			instruction += "ADDI ";
		} else if (s.substring(0, 3).equals("011")) {
			instruction += "SUBI ";
		} else if (s.substring(0, 3).equals("100")) {
			instruction += "ANDI ";
		} else if (s.substring(0, 3).equals("101")) {
			instruction += "SRL ";
		} else if (s.substring(0, 3).equals("110")) {
			instruction += "SRA ";
		} else if (s.substring(0, 3).equals("111")) {
			instruction += "SLL ";
		}
		if (instruction.equals("SRL ") || instruction.equals("SRA ") || instruction.equals("SLL ")) {
			instruction += "R" + bin2dec(twoscomp(s.substring(3, 8))) + ", " + "R"
					+ bin2dec(twoscomp(s.substring(8, 13))) + ", " + "#" + unsigned(s.substring(25, s.length()));
		} else if (instruction.equals("ORI ") || instruction.equals("XORI ") || instruction.equals("ANDI ")) {
			instruction += "R" + bin2dec(twoscomp(s.substring(3, 8))) + ", " + "R"
					+ bin2dec(twoscomp(s.substring(8, 13))) + ", " + "#" + unsigned(s.substring(13, s.length()));
		} else {
			instruction += "R" + bin2dec(twoscomp(s.substring(3, 8))) + ", " + "R"
					+ bin2dec(twoscomp(s.substring(8, 13))) + ", " + "#"
					+ bin2dec(twoscomp(s.substring(13, s.length())));
		}
		return instruction;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner reader =new Scanner(System.in);
		System.out.print("Enter: ");
		String name = reader.next();
        //name = args[0];
		File file = new File(name);
		ArrayList<String> info = new ArrayList<String>();
		ArrayList<String> mipscode = new ArrayList<String>();
		ArrayList<Integer> address = new ArrayList<Integer>();
		ArrayList<Integer> data = new ArrayList<Integer>();
		ArrayList<Integer> register = new ArrayList<Integer>(Collections.nCopies(32, 0));
		int base = 64;
		try {
			if (file.exists() == true) {
				Scanner sc = new Scanner(file);
				while (sc.hasNextLine()) {
					info.add(sc.nextLine());
					address.add(base);
					base += 4;
				}
				sc.close();
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		for (int i = 0; i < info.size(); i++) {
			// System.out.println(info.get(i).substring(0, 3));
			if (info.get(i).substring(0, 3).equals("001")) {
				String s = info.get(i).substring(3, info.get(i).length());
				// System.out.println(s);
				mipscode.add(cat1(s));
				//String temp = cat1(s);
				//System.out.println(temp);
			} else if (info.get(i).substring(0, 3).equals("010")) {
				String s = info.get(i).substring(3, info.get(i).length());
				mipscode.add(cat2(s));
				//String temp = cat2(s);
				//System.out.println(temp);
			} else if (info.get(i).substring(0, 3).equals("100")) {
				String s = info.get(i).substring(3, info.get(i).length());
				mipscode.add(cat3(s));
				//String temp = cat3(s);
				//System.out.println(temp);
			} else {
				mipscode.add(Integer.toString(bin2dec(twoscomp(info.get(i)))));
				data.add(bin2dec(twoscomp(info.get(i))));
				//int j = bin2dec(twoscomp(info.get(i)));
				//System.out.println(j);
			}
		}
		filewrite(info,address,mipscode);
		mips(mipscode,address,register,data,64);
	}

	static void mips(ArrayList<String> s, ArrayList<Integer> address, ArrayList<Integer> register, ArrayList<Integer> data,
			int ad) {
		int i = address.indexOf(ad);
		int cycle = 1;
		do {
			if (s.get(i).substring(0, 3).equals("NOP")) {
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				i++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 2).equals("J ")) {
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad = Integer.parseInt(s.get(i).substring(3, s.get(i).length()));
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 4).equals("BEQ ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(5, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				if (register.get(reg1) == register.get(reg2)) {
					filewrite(s, address, register, data, cycle, ad);
					//print(s, address, register, data, cycle, ad);
					cycle++;
					ad += 4;
					ad += 4 * Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
					i = address.indexOf(ad);
				} else {
					filewrite(s, address, register, data, cycle, ad);
					//print(s, address, register, data, cycle, ad);
					cycle++;
					ad += 4;
					i = address.indexOf(ad);
				}
			} else if (s.get(i).substring(0, 4).equals("BNE ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(5, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				if (register.get(reg1) != register.get(reg2)) {
					filewrite(s, address, register, data, cycle, ad);
					//print(s, address, register, data, cycle, ad);
					cycle++;
					ad += 4;
					ad += 4 * Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
					i = address.indexOf(ad);
				} else {
					filewrite(s, address, register, data, cycle, ad);
					//print(s, address, register, data, cycle, ad);
					cycle++;
					ad += 4;
					i = address.indexOf(ad);
				}
			} else if (s.get(i).substring(0, 5).equals("BGTZ ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(6, s.get(i).indexOf(',')));
				if (register.get(reg1) > 0) {
					filewrite(s, address, register, data, cycle, ad);
					//print(s, address, register, data, cycle, ad);
					cycle++;
					ad += 4;
					ad += 4 * Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).length()));
					i = address.indexOf(ad);
				} else {
					filewrite(s, address, register, data, cycle, ad);
					//print(s, address, register, data, cycle, ad);
					cycle++;
					ad += 4;
					i = address.indexOf(ad);
				}
			} else if (s.get(i).substring(0, 3).equals("SW ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(4, 5));
				int value = register.get(reg1);
				int offset = Integer.parseInt(s.get(i).substring(7, s.get(i).indexOf('(')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf('(') + 2, s.get(i).indexOf(')')));
				int val = register.get(reg2);
				offset = offset + val;
				data.set((offset-144)/4, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 3).equals("LW ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(4, s.get(i).indexOf(',')));
				int offset = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 2, s.get(i).indexOf('(')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf('(') + 2, s.get(i).indexOf(')')));
				offset = offset + register.get(reg2);
				int value = data.get((offset-144)/4);
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 4).equals("XOR ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(5, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int reg3 = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) ^ register.get(reg3);
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 4).equals("MUL ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(5, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int reg3 = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) * register.get(reg3);
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 4).equals("ADD ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(5, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int reg3 = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) + register.get(reg3);
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 4).equals("SUB ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(5, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int reg3 = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) - register.get(reg3);
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 4).equals("AND ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(5, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int reg3 = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) & register.get(reg3);
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 3).equals("OR ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(4, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int reg3 = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) | register.get(reg3);
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 5).equals("ADDU ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(6, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int reg3 = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) + register.get(reg3);
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 5).equals("SUBU ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(6, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int reg3 = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) - register.get(reg3);
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 4).equals("ORI ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(5, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int immediate = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) | register.get(immediate);
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 4).equals("ORI ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(5, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int immediate = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) | immediate;
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 5).equals("XORI ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(6, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int immediate = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) ^ immediate;
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 5).equals("ADDI ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(6, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int immediate = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) + immediate;
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 5).equals("SUBI ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(6, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int immediate = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) - immediate;
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 5).equals("ANDI ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(6, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int immediate = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) & immediate;
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 4).equals("SRL ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(5, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int immediate = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = Math.floorDiv(register.get(reg2), (int) Math.pow(2, immediate));
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 4).equals("SRA ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(5, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int immediate = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = Math.floorDiv(register.get(reg2), (int) Math.pow(2, immediate));
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			} else if (s.get(i).substring(0, 4).equals("SLL ")) {
				int reg1 = Integer.parseInt(s.get(i).substring(5, s.get(i).indexOf(',')));
				int reg2 = Integer.parseInt(s.get(i).substring(s.get(i).indexOf(',') + 3, s.get(i).lastIndexOf(',')));
				int immediate = Integer.parseInt(s.get(i).substring(s.get(i).lastIndexOf(',') + 3, s.get(i).length()));
				int value = register.get(reg2) * (int) Math.pow(2, immediate);
				register.set(reg1, value);
				filewrite(s, address, register, data, cycle, ad);
				//print(s, address, register, data, cycle, ad);
				cycle++;
				ad += 4;
				i = address.indexOf(ad);
			}
		}while (i < s.indexOf("BREAK"));
		filewrite(s, address, register, data, cycle, ad);
		//print(s, address, register, data, cycle, ad);
	}

	static void print(ArrayList<String> s, ArrayList<Integer> address, ArrayList<Integer> register, ArrayList<Integer> data,
			int cycle, int ad) {
		System.out.println("--------------------");
		System.out.println("Cycle " + cycle + ":\t" + ad + "\t" + s.get(address.indexOf(ad)));
		System.out.println("");
		System.out.println("Registers");
		int i = 0;
		for (int j = 0; j < 4; j++) {
			if(i<10)
				System.out.print("R0" + i + ":\t");
			else
				System.out.print("R" + i + ":\t");
			do {
				System.out.print(register.get(i));
				i++;
				if(i%8!=0)
					System.out.print("\t");
				else
					continue;
			} while (i % 8 != 0);
			System.out.println("");
		}
		i =20;
		System.out.println("");
		System.out.println("Data");
		for (int j = 0; j < 2; j++) {
			System.out.print(address.get(i) + ":\t");
			do {
				System.out.print(data.get(i-20));
				i++;
				if(i%8!=4)
					System.out.print("\t");
				else
					continue;
			} while (i % 8 != 4);
			System.out.println("");
		}
	}
	
	static void filewrite(ArrayList<String> info, ArrayList<Integer> address, ArrayList<String> mipscode){
		String content = "";
		try{
			File file1 = new File("disassembly.txt");
			file1.createNewFile();
			FileWriter fw = new FileWriter(file1.getAbsoluteFile(), true);
			BufferedWriter bw = new BufferedWriter(fw);
			for(int i =0;i<info.size();i++){
				content = info.get(i)+ "\t" + address.get(i) + "\t" + mipscode.get(i);
				bw.write(content);
				bw.write(System.lineSeparator());
			}
			bw.close();
			fw.close();
		}catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	static void filewrite(ArrayList<String> s, ArrayList<Integer> address, ArrayList<Integer> register, ArrayList<Integer> data,
			int cycle, int ad){
		String content = "";
		try{
		File file1 = new File("simulation.txt");
		file1.createNewFile();
		FileWriter fw = new FileWriter(file1.getAbsoluteFile(), true);
		BufferedWriter bw = new BufferedWriter(fw);
		bw.write("--------------------");
		bw.write(System.lineSeparator());
		content = "Cycle " + cycle + ":\t" + ad + "\t" + s.get(address.indexOf(ad));
		bw.write(content);
		bw.write(System.lineSeparator());
		bw.write("\n");
		//bw.write(System.lineSeparator());
		bw.write("Registers");
		bw.write(System.lineSeparator());
		int i =0;
		for (int j = 0; j < 4; j++) {
			if(i<10){
				content = "R0" + i + ":\t";
				bw.write(content);
			}
			else{
				content = "R" + i + ":\t";
				bw.write(content);
			}
			do {
				content = Integer.toString(register.get(i));
				bw.write(content);
				i++;
				if(i%8!=0)
					bw.write("\t");
				else
					continue;
			} while (i % 8 != 0);
			bw.write(System.lineSeparator());
			//bw.write("\n");
			//bw.write(System.lineSeparator());
		}
		i =20;
		//bw.write("\n");
		bw.write(System.lineSeparator());
		bw.write("Data");
		bw.write(System.lineSeparator());
		for (int j = 0; j < 2; j++) {
			content = address.get(i) + ":\t";
			bw.write(content);
			do {
				content = Integer.toString(data.get(i-20));
				bw.write(content);
				i++;
				if(i%8!=4)
					bw.write("\t");
				else
					continue;
			} while (i % 8 != 4);
			bw.write(System.lineSeparator());
			//bw.write("\n");
		}
		bw.write(System.lineSeparator());
		bw.close();
		fw.close();
		}catch (IOException e) {
			e.printStackTrace();
		}
	}
}
